###################################################
# Buildout to install a user driven mysql server. #
###################################################

[buildout]

parts +=
#conf
    env
    grp
    mycnf-conf
    automysqlbackup-conf
    logrotate_conf
#bin
    mysqld-safe
    mysql-bin
    mysql-admin
    mysql-dump
    automysqlbackup
#install and run
    omelette
    supervisor 
    superisor_pidproxy_make_executable
    mysql_install_db
 
[userdata]
name = ${env:USER}
group = ${grp:GROUP}
mysql_database = ${userdata:name}
mysql_user = root    
mysql_pwd = password 

[ports] 
mysql = 9003
supervisor = 9010
 
[binaries]
mysql= /usr/bin 

##############################################################################  
# Config files 
##############################################################################  

#get current user
[env]
recipe = gocept.recipe.env
#get current group
[grp]
recipe = collective.recipe.grp
  
[mycnf]
basedir= /usr
datadir=${buildout:directory}/var
pid=${mycnf:datadir}/mysql.pid
err = ${buildout:directory}/var/log/mysql.err
sock = ${mycnf:datadir}/mysql.sock
user =  ${userdata:mysql_user}
opt = --defaults-file=${mycnf-conf:output} --pid-file=${mycnf:pid} --skip-syslog  

[mycnf-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/my.cnf.in
output = ${buildout:directory}/etc/my.cnf
 
[automysqlbackup-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/automysqlbackup.conf.in
output = ${buildout:directory}/etc/automysqlbackup.conf

[logrotate_conf]
recipe = zc.recipe.deployment:configuration
text = 
    create 640 ${userdata:name} root
    compress 
    sharedscripts
    missingok 

    ${buildout:directory}/var/log/mysql-error.log ${buildout:directory}/var/log/mysql-slow.log ${buildout:directory}/var/log/mysql.log {
        daily
        rotate 7
        postrotate
            test -x ${buildout:directory}/bin/mysqladmin || exit 0
            if [ -z "`${buildout:directory}/bin/mysqladmin ping 2>/dev/null`" ]; then
              if killall -q -s0 -umysql mysqld; then
                exit 1
              fi 
            else
              ${buildout:directory}/bin/mysqladmin flush-logs
            fi
        endscript
    }
 
##############################################################################  
#Binaries 
##############################################################################  

[mysql-bin]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/mysql.in
output = ${buildout:directory}/bin/mysql

[mysql-admin]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/mysqladmin.in
output = ${buildout:directory}/bin/mysqladmin

[mysql-dump]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/mysqldump.in
output = ${buildout:directory}/bin/mysqldump

[mysqld-safe]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/mysqld_safe_run_as_user.in
output = ${buildout:directory}/bin/mysqld_safe_run_as_user

[automysqlbackup]
recipe = plone.recipe.command
stop-on-error = false
command =  
    cp ${buildout:directory}/templates/automysqlbackup  ${buildout:directory}/bin/automysqlbackup
    chown ${userdata:name}:${userdata:group} ${buildout:directory}/bin/automysqlbackup
    mkdir ${buildout:directory}/backups
 
 
##############################################################################  
#Access rights
##############################################################################  

[superisor_pidproxy_make_executable]
recipe = plone.recipe.command
stop-on-error = false
command =  
#take care supervisor pidproxy  is executalbe
    chmod a+x ${supervisor:pp}
update-command = ${superisor_pidproxy_make_executable:command}

#######################################################################################
#Install scripts
#######################################################################################

# supervisor to start the mysql server
[omelette]
recipe = collective.recipe.omelette
eggs = supervisor

[supervisor]
recipe = collective.recipe.supervisor
port = 127.0.0.1:${ports:supervisor}
user = super
password = super_pwd
pp = ${buildout:directory}/parts/omelette/supervisor/pidproxy.py
programs =
    10 mysql ${supervisor:pp} [ ${mycnf:pid} ${binaries:mysql}/mysqld_safe ${mycnf:opt} ] true ${userdata:name}


# create mysql database
[mysql_install_db]
recipe = plone.recipe.command                                                                                        
command =                                                                                                            
    [ ! -f  ${buildout:directory}/var ] &&  mkdir ${buildout:directory}/var
    [ ! -f  ${buildout:directory}/var/log ] &&  mkdir ${buildout:directory}/var/log
    [ ! -f  ${buildout:directory}/var/mysql ] &&  mkdir ${buildout:directory}/var/mysql
    chown ${userdata:name}:${userdata:group} ${buildout:directory}/var                                             
    chown ${userdata:name}:${userdata:group} ${buildout:directory}/var/log                                             
    chown ${userdata:name}:${userdata:group} ${buildout:directory}/var/mysql                                             
    sudo -u  ${userdata:name} ${binaries:mysql}/mysql_install_db --datadir=${mycnf:datadir} --user=${userdata:name} --log=${buildout:directory}/var/log
    echo "---------------------------------------------------------------------"                                     
    echo "When you have problems running mysqld mind appamor and access rights."                                     
    echo ""                                                                                                          
    echo "Starting superpervisor/mysqld to set up password and create database."                                     
    [ ! -f ./var/supervisord.pid ] && ./bin/supervisord  && sleep 5                                                  
    [ -f  ${mycnf:pid} ] &&  ${binaries:mysql}/mysqladmin --socket=${mycnf:sock} -u root password "${userdata:mysql_pwd}"
    [ -f  ${mycnf:pid} ] &&  ${buildout:directory}/bin/mysqladmin create '${userdata:mysql_database}'                
    echo ""                                                                                                          
update-command=${mysql_install_db:command} 
 




 
